package persistence.entity.impl.retrieve;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertAll;

import database.DatabaseServer;
import database.H2;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import persistence.entity.EntityManager;
import persistence.entity.impl.EntityManagerFactory;
import persistence.sql.ddl.generator.CreateDDLQueryGenerator;
import persistence.sql.ddl.generator.DropDDLQueryGenerator;
import persistence.sql.dialect.ColumnType;
import persistence.sql.dialect.H2ColumnType;
import persistence.sql.dml.Database;
import persistence.sql.dml.JdbcTemplate;

@DisplayName("EntityCollectionLoader Eager 테스트")
class EntityCollectionLoaderEagerTest {

    private DatabaseServer server;

    private Database jdbcTemplate;

    private EntityManager entityManager;

    private ColumnType columnType;

    @BeforeEach
    void setUp() throws SQLException {
        server = new H2();
        server.start();

        Connection connection = server.getConnection();

        columnType = new H2ColumnType();
        final EntityManagerFactory emf = new EntityManagerFactory(connection, columnType);
        entityManager = emf.createEntityManager();
        jdbcTemplate = new JdbcTemplate(connection);
        CreateDDLQueryGenerator createDDLQueryGenerator = new CreateDDLQueryGenerator(columnType);
        jdbcTemplate.execute(createDDLQueryGenerator.create(EntityLoaderImplTest.EntityLoaderEntity.class));
        jdbcTemplate.execute(
            "CREATE TABLE CHILD (id bigint generated by default as identity PRIMARY KEY, parent_id bigint, name varchar);");
    }

    @AfterEach
    void tearDown() throws Exception {
        DropDDLQueryGenerator dropDDLQueryGenerator = new DropDDLQueryGenerator(new H2ColumnType());
        jdbcTemplate.execute(dropDDLQueryGenerator.drop(EntityLoaderImplTest.EntityLoaderEntity.class));
        jdbcTemplate.execute("DROP TABLE CHILD");
        entityManager.close();
        server.stop();
    }

    @Test
    @DisplayName("EntityCollectionLoader를 통해 자식 Entity를 불러올 수 있다.")
    void entityLoaderCanLoad() throws SQLException {
        final EntityLoaderEntity entity = new EntityLoaderEntity();
        final EntityLoaderEntity loadedEntity = (EntityLoaderEntity) entityManager.persist(entity);

        jdbcTemplate.execute("INSERT INTO CHILD (parent_id, name) VALUES (1, 'child1');");
        jdbcTemplate.execute("INSERT INTO CHILD (parent_id, name) VALUES (1, 'child2');");
        jdbcTemplate.execute("INSERT INTO CHILD (parent_id, name) VALUES (1, 'child3');");
        jdbcTemplate.execute("INSERT INTO CHILD (parent_id, name) VALUES (1, 'child4');");

        final EntityCollectionLoader entityCollectionLoader = new EntityCollectionLoader(server.getConnection());

        final EntityLoaderEntity entityLoaderEntity = entityCollectionLoader.loadCollection(
            EntityLoaderEntity.class,
            loadedEntity,
            columnType
        );

        assertAll(
            () -> assertThat(entityLoaderEntity.getChildEntityList().size()).isEqualTo(4),
            () -> assertThat(entityLoaderEntity.getChildEntityList()).extracting("name")
                .containsExactly("child1", "child2", "child3", "child4")
        );
    }

    @Entity
    static class EntityLoaderEntity {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        @OneToMany(fetch = FetchType.EAGER)
        @JoinColumn(name = "parent_id")
        private final List<ChildEntity> childEntityList = new ArrayList<>();

        protected EntityLoaderEntity() {
        }

        public Long getId() {
            return id;
        }

        public List<ChildEntity> getChildEntityList() {
            return childEntityList;
        }
    }

    @Entity
    @Table(name = "child")
    private static class ChildEntity {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        private String name;
    }
}
