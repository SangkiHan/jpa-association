package persistence.sql.dialect;

import java.lang.reflect.Field;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import persistence.sql.exception.ClassMappingException;

/**
 * @http://www.h2database.com/html/datatypes.html
 */
public class H2ColumnType implements ColumnType {

    private final Map<Class<?>, String> typeMap = new HashMap<>();

    private static final HashMap.Entry<Class<?>, String> longType = Map.entry(Long.class, "bigint");
    private static final HashMap.Entry<Class<?>, String> stringType = Map.entry(String.class, "varchar");
    private static final HashMap.Entry<Class<?>, String> integerType = Map.entry(Integer.class, "integer");
    private static final HashMap.Entry<Class<?>, String> booleanType = Map.entry(Boolean.class, "boolean");

    public H2ColumnType() {
        typeMap.put(longType.getKey(), longType.getValue());
        typeMap.put(stringType.getKey(), stringType.getValue());
        typeMap.put(integerType.getKey(), integerType.getValue());
        typeMap.put(booleanType.getKey(), booleanType.getValue());
    }

    @Override
    public String generationIdentity() {
        return "generated by default as identity";
    }

    @Override
    public String getFieldType(Field field) {
        if (Collection.class.isAssignableFrom(field.getType())) {
            return field.getType().getTypeName();
        }

        final String fieldType = typeMap.get(field.getType());
        if (fieldType == null) {
            throw ClassMappingException.notSupportedType(field.getType());
        }

        return fieldType;
    }
}
